@using imediatus.Blazor.Infrastructure.Helpers
@using imediatus.Shared.Enums
@using FluentValidation
@using BlazorJS
@using Newtonsoft.Json
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.AddTask" Class="mr-3 mb-n1" />
            Create a Portfolio
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" Model="@_portfolioModel" Validation="@(_validationRules.ValidateValue)" ValidationDelay="0">
            <MudGrid>
                <MudItem xs="12" md="12">
                    <MudChip T="string" Label="true">To Do</MudChip>
                </MudItem>
                <MudItem xs="12" md="12">
                    <MudTextField @bind-Value="_portfolioModel.Summary"
                                  For="@(() => _portfolioModel.Summary)"
                                  Immediate="true"
                                  Label="Summary" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudSelect T="PortfolioClassification"
                               @bind-Value="_portfolioModel.Classification"
                               Label="Classification">
                        @foreach (var classification in _classifications)
                        {
                            <MudSelectItem Value="@classification">
                                <MudStack Class="mud-width-full" Justify="MudBlazor.Justify.SpaceBetween">
                                    <MudStack Row="true" Justify="MudBlazor.Justify.SpaceBetween" AlignItems="MudBlazor.AlignItems.Center">
                                        <MudStack Row="true">
                                            <MudIcon Icon="@MudBlazorHelper.GetPortfolioClassificationIcon(classification)"
                                                     Color="@MudBlazorHelper.GetPortfolioClassificationColor(classification)" />
                                            <MudText>@classification.Name</MudText>
                                        </MudStack>
                                    </MudStack>
                                </MudStack>
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="4">

                    <MudSelect T="PortfolioPriority"
                               @bind-Value="_portfolioModel.Priority"
                               Label="Priority">
                        @foreach (var priority in _priorities)
                        {
                            <MudSelectItem Value="@priority">
                                <MudStack Class="mud-width-full" Justify="MudBlazor.Justify.SpaceBetween">
                                    <MudStack Row="true" Justify="MudBlazor.Justify.SpaceBetween" AlignItems="MudBlazor.AlignItems.Center">
                                        <MudStack Row="true">
                                            <MudIcon Icon="@MudBlazorHelper.GetPortfolioPriorityIcon(priority)"
                                                     Color="@MudBlazorHelper.GetPortfolioPriorityColor(priority)" />
                                            <MudText>@priority.Name</MudText>
                                        </MudStack>
                                    </MudStack>
                                </MudStack>
                            </MudSelectItem>
                        }
                    </MudSelect>


                </MudItem>
                <MudItem xs="12" md="4">


                    <MudSelect T="CostCenterResponse"
                               @bind-Value="_portfolioModel.CostCenter"
                               For="@(() => _portfolioModel.CostCenter)"
                               Label="Cost Center"
                               Clearable="true">

                        @if (_portfolioModel.CostCenter is null)
                        {
                            <MudSelectItem Value="@((CostCenterResponse)null)">
                                <MudText Align="Align.Center" Class="px-4 py-1">Item not found!</MudText>
                            </MudSelectItem>
                        }

                        @foreach (var cc in _costCenters)
                        {
                            <MudSelectItem Value="@cc">
                                <MudStack Class="mud-width-full" Justify="MudBlazor.Justify.SpaceBetween">
                                    <MudStack Row="true" AlignItems="MudBlazor.AlignItems.Center">
                                        <MudText>@cc.Name</MudText>
                                    </MudStack>
                                </MudStack>
                            </MudSelectItem>
                        }
                    </MudSelect>

                </MudItem>
                <MudItem xs="12" md="12">

                    <MudSelect T="UserDetail"
                               @bind-Value="_portfolioModel.Assignee"
                               For="@(() => _portfolioModel.Assignee)"
                               Label="Assignee"
                               Clearable="true"
                               Converter="_userConverter">

                        @foreach (var user in _users)
                        {
                            <MudSelectItem Value="@user">
                                <MudStack Class="mud-width-full" Spacing="1">
                                    <MudText Typo="MudBlazor.Typo.body2"><b>@($"{user.LastName}, {user.FirstName}")</b></MudText>
                                    <MudStack Row="true" Justify="MudBlazor.Justify.SpaceBetween" AlignItems="MudBlazor.AlignItems.Center">
                                        <MudStack Row="true" Spacing="1" AlignItems="MudBlazor.AlignItems.Center">
                                            <MudIcon Icon="@MudBlazor.Icons.Material.Outlined.Email" />
                                            <MudText Typo="MudBlazor.Typo.caption">@user.Email</MudText>
                                        </MudStack>
                                        <MudChip T="string" Variant="MudBlazor.Variant.Outlined" Color="@MudBlazorHelper.GetPortfolioStatusColor(user.IsActive ? PortfolioStatus.Done : PortfolioStatus.Rejected)">
                                            @(user.IsActive ? "Active" : "Retired")
                                        </MudChip>
                                    </MudStack>
                                </MudStack>
                            </MudSelectItem>
                        }
                    </MudSelect>

                </MudItem>
                <MudItem xs="12" md="12">
                    @* <FileExplorerManager ContainerId="@Id" IsNewFolder="true" IsUpload="true" IsDownload="true" IsRename="true" IsDelete="true" /> *@

                    <MudExUploadEdit T="UploadableFile"
                                     Variant="Variant.Outlined"
                                     For="@(() => _portfolioModel.Files)"
                                     DropZoneClickAction="DropZoneClickAction.UploadFile"
                                     TextUploadFile="Click here to upload files"
                                     TextDropZone="Drag and Drop files here"
                                     Label="Add files"
                                     ColorizeIcons="true"
                                     MinHeight="80"
                                     Class="MudExUploadExCustom"
                                     AllowRename="true"
                                     @bind-UploadRequests="_portfolioModel.Files">
                    </MudExUploadEdit>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudTooltip Text="Todas as alterações serão perdidas.">
            <MudButton DropShadow="false" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" OnClick="MudDialog.Cancel">
                Cancel
            </MudButton>
        </MudTooltip>
        <MudTooltip Text="Guarda as alterações.">

            <MudButton Disabled="@_saving" DropShadow="false" OnClick="@(async () => await SaveAsync())" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" ButtonType="ButtonType.Submit" Color="Color.Success">
                @if (_saving)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Saving</MudText>
                }
                else
                {
                    <MudText>Save</MudText>
                }
            </MudButton>
        </MudTooltip>
    </DialogActions>
</MudDialog>